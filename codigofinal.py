# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q1oMpp1_F9pA9bYucT4tclOPr2lkJxyl

**MOSTRAR IMAGENES DE LA BASE DE DATOS**
"""

from keras.datasets import cifar10
import matplotlib.pyplot as plt
(x_train,y_train),(x_test,ytest)=cifar10.load_data()
plt.subplot(341)
plt.imshow(x_train[0])
plt.subplot(342)
plt.imshow(x_train[1])
plt.subplot(343)
plt.imshow(x_train[30])
plt.subplot(344)
plt.imshow(x_train[3])
plt.subplot(345)
plt.imshow(x_train[4])
plt.subplot(346)
plt.imshow(x_train[17])
plt.subplot(347)
plt.imshow(x_train[18])
plt.subplot(348)
plt.imshow(x_train[7])
plt.subplot(349)
plt.imshow(x_train[27])
plt.subplot(3,4,10)
plt.imshow(x_train[62])
plt.show()

from time import time
from numpy.random import seed
seed(1)
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Flatten
from keras.utils import np_utils
tiempo_inicial=time()
(x_train,y_train),(x_test,y_test)=cifar10.load_data()
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)

"""NORMALIZAR"""

x_train=x_train/255.0
x_test=x_test/255.0
print('el valor dentro de la primera posicion de Y es {}'.format(y_train[0,]))

"""RESHAPE"""

X_train=x_train.reshape(50000,32,32,3)
X_test=x_test.reshape(10000,32,32,3)
Y_train=np_utils.to_categorical(y_train,10)
Y_test=np_utils.to_categorical(y_test,10)
print(X_train.shape)
print(Y_train.shape)

print('valores dentro de x')
print(X_train[0,:,:,0])
print()
print('valores dentro de y')
print(Y_train[0,:])

"""MODELO-RED"""

model = Sequential()
model.add(Convolution2D(32, (3, 3), activation='relu', padding='same', input_shape=(32, 32, 3))),
model.add(Convolution2D(32, (3, 3), activation='relu', padding='same')),
model.add(MaxPooling2D((2, 2))),
model.add(Convolution2D(64, (3, 3), activation='relu', padding='same')),
model.add(Convolution2D(64, (3, 3), activation='relu', padding='same')),
model.add(MaxPooling2D((2, 2))),
model.add(Flatten()),
model.add(Dense(128, activation='relu')),
model.add(Dense(10, activation='softmax')),
print(model.summary())

"""COMPILAR CON GPU"""

model.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='adadelta')
model.fit(X_train,Y_train,batch_size=100,epochs=10,validation_split=0.1,verbose=1)
score=model.evaluate(X_test,Y_test,verbose=1)
print('Test accuracy:',score[1])

tiempo_final=time()
tiempo_ejecucion=tiempo_final-tiempo_inicial
print('El tiempo de ejecucion fue: ',tiempo_ejecucion)

"""UPLOAD IMAGENES PARA CLASIFICAR

Imagen 1
"""

from PIL import Image
from PIL import ImageFile
ImageFile.load_TRUNCATED_IMAGES = True
from google.colab import files
uploaded = files.upload()

import numpy as np
img=Image.open('avion.jpg')
new_img=img.resize((32,32))
new=np.array(new_img)
print(np.shape(new))
img=new.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255.0
result=model.predict_classes(img)
result[0]

"""imagen 2"""

from PIL import Image
from PIL import ImageFile
ImageFile.load_TRUNCATED_IMAGES = True
from google.colab import files
uploaded = files.upload()

import numpy as np
img=Image.open('camion.jpg')
new_img=img.resize((32,32))
new=np.array(new_img)
print(np.shape(new))
img=new.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255.0
result=model.predict_classes(img)
result[0]

"""imagen 3"""

from PIL import Image
from PIL import ImageFile
ImageFile.load_TRUNCATED_IMAGES = True
from google.colab import files
uploaded = files.upload()

import numpy as np
img=Image.open('gato.jpg')
new_img=img.resize((32,32))
new=np.array(new_img)
print(np.shape(new))
img=new.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255.0
result=model.predict_classes(img)
result[0]

"""imagen 4"""

from PIL import Image
from PIL import ImageFile
ImageFile.load_TRUNCATED_IMAGES = True
from google.colab import files
uploaded = files.upload()

import numpy as np
img=Image.open('pajaro.jpg')
new_img=img.resize((32,32))
new=np.array(new_img)
print(np.shape(new))
img=new.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255.0
result=model.predict_classes(img)
result[0]

"""imagen 5"""

from PIL import Image
from PIL import ImageFile
ImageFile.load_TRUNCATED_IMAGES = True
from google.colab import files
uploaded = files.upload()

import numpy as np
img=Image.open('sapo.jpg')
new_img=img.resize((32,32))
new=np.array(new_img)
print(np.shape(new))
img=new.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255.0
result=model.predict_classes(img)
result[0]